#!/bin/bash
# NAME
#   log-tabulate - generate an HTML table from one or more log files.
# SYNTAX
#   log-tabulate logfile [-d classname]
# DESCRIPTION
#   log-tabulate writes an HTML encoded table of the data contained in logfile
#   to standard output.
#
#   The generated table can be wrapped in a DIV with class="classname",
#   by use of the -d option.   

source log.defs

if [ "${1}" == "" ] ; then
    echo -e "usage: log-tabulate [-c wrapper-class] [-d data-value] -p logfile\n"
    exit 1
fi

DISPLAYPOSITIONDATA="yes"
LOGFILESPEC=""

while [ "${1}" != "" ] ; do
    case ${1} in
        -p)
            DISPLAYPOSITIONDATA="no"
            ;;
        *)
            LOGFILESPEC=${1}
            ;;
    esac
    shift
done

case "${#LOGFILESPEC}" in
    4)
        TITLE=${LOGFILESPEC}
        ;;
    6)
        TITLE=$(${DATE} -d ${LOGFILESPEC}01 '+%B %Y')
        ;;
    8)
        TITLE=$(${DATE} -d ${LOGFILESPEC} '+%a %d %B %Y')
        ;;
    *)
        echo "log-tabulate: bad or missing logfile name"
        exit 1
        ;;
esac

STOPS=$(${LOGSTOPS} ${LOGFILESPEC})

echo "<table width='100%'>"
echo "  <tr><th colspan='3' align='center'>${TITLE}</th></tr>"
if [ "${DISPLAYPOSITIONDATA}" == "yes" ] ; then
    LAT=$(${HEAD} -1 <<< "${STOPS}" | ${JQ} -j '.latitude')
    LON=$(${HEAD} -1 <<< "${STOPS}" | ${JQ} -j '.longitude')
    echo "  <tr><td>Position at start of day (lat,lon)</td><td colspan='2'>${LAT},${LON}</td></tr>"
    LAT=$(${TAIL} -1 <<< "${STOPS}" | ${JQ} -j '.latitude')
    LON=$(${TAIL} -1 <<< "${STOPS}" | ${JQ} -j '.longitude')
    echo "  <tr><td>Position at end of day (lat,lon)</td><td colspan='2'>${LAT},${LON}</td></tr>"
    echo "  <tr><td>Distance travelled (km)</td><td colspan='2'>$(${LOGTRIP} ${LOGFILESPEC})</td></tr>"
    echo "  <tr><td>Engine run time (h:m)</td><td colspan='2'>$(${LOGRUNTIME} -d engine ${LOGFILESPEC})</td></tr>"
fi
echo "  <tr><td>Generator run time (h)</td><td colspan='2'>$(${LOGRUNTIME} -d generator ${LOGFILESPEC})</td></tr>"

while [ ${#LOGFILESPEC} -lt 8 ] ; do LOGFILESPEC=${LOGFILESPEC}'?' ; done
LOGFILESPEC=${LOGDIR}${LOGFILESPEC}

S=$(getStartValue 'BATTERYSTATE Domestic' "${LOGFILESPEC}" '100')
E=$(getEndValue 'BATTERYSTATE Domestic' "${LOGFILESPEC}" '100')
echo "  <tr><td>Domestic battery state (%)</td><td>"${S%.*}"</td><td>"${E%.*}"</td></tr>"
S=$(getStartValue 'TANKLEVEL Wastewater' "${LOGFILESPEC}" '100')
E=$(getEndValue 'TANKLEVEL Wastewater' "${LOGFILESPEC}" '100')
echo "  <tr><td>Waste water tank (%)</td><td>"${S%.*}"</td><td>"${E%.*}"</td></tr>"
SA=$(getStartValue 'TANKLEVEL FreshwaterPS' "${LOGFILESPEC}" '100')
SB=$(getStartValue 'TANKLEVEL FreshwaterSB' "${LOGFILESPEC}" '100')
EA=$(getEndValue 'TANKLEVEL FreshwaterPS' "${LOGFILESPEC}" '100')
EB=$(getEndValue 'TANKLEVEL FreshwaterSB' "${LOGFILESPEC}" '100')
echo "  <tr><td>Fresh water tanks (PS,SB) (%,%)</td><td>"${SA%.*}", "${SB%.*}"</td><td>"${EA%.*}", "${EB%.*}"</td></tr>"
SA=$(getStartValue 'TANKLEVEL FuelPS' "${LOGFILESPEC}" '100')
SB=$(getStartValue 'TANKLEVEL FuelSB' "${LOGFILESPEC}" '100')
EA=$(getEndValue 'TANKLEVEL FuelPS' "${LOGFILESPEC}" '100')
EB=$(getEndValue 'TANKLEVEL FuelSB' "${LOGFILESPEC}" '100')
echo "  <tr><td>Fuel tanks (PS,SB) (%,%)</td><td>"${SA%.*}", "${SB%.*}"</td><td>"${EA%.*}", "${EB%.*}"</td></tr>"
echo "</table>"

