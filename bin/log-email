#!/bin/bash
# NAME
#   log-email - email a disgest of a daily log file.
# SYNOPSIS
#   log-email logfile [emailaddress]
# DESCRIPTION
#   log-email constructs an email containing data drawn from the log file
#   identified by logfile which must be the name of an existing log file
#   in the format YYYYMMDD.
#
#   If the specified logfile contains data which describes a passage, then
#   the generated email message will have a body consisting of an HTML
#   table of operating data drawn from the log and an attachment consisting
#   of a PNG rendering of position data drawn from the log.  The body of
#   the email message will be wrapped in [aside] tags which can be used to
#   influence processing by the email recipient.
#   
source log.defs

if [ "${1}" == "" ] ; then
    echo -e "usage: log-email [-d] logfile [recipient]\n"
    exit 1
fi

while [ "${1}" ] ; do
    case ${1} in
        -d)
            DEBUG=yes
            ;;
        *)
            if [ ! "${LOGFILE}" ] ; then
                LOGFILESPEC=${1}
                RECIPIENT=${LOG_EMAIL_DEFAULT_RECIPIENT}
                case ${#LOGFILESPEC} in
                    4) 
                        LOGDATESTRING=${LOGFILESPEC}
                        PUBDATE=$(${DATE} '+%Y%m%d')
                        ;;
                    6)
                        LOGDATESTRING=$(${DATE} -d ${LOGFILESPEC}01 '+%B %Y')
                        PUBDATE=$(${DATE} '+%Y%m%d')
                        ;;
                    8)
                        LOGDATESTRING=$(${DATE} -d "${LOGFILESPEC}" '+%a %d %b %Y')
                        PUBDATE=$(${DATE} -d "${LOGFILESPEC}" '+%Y%m%d')
                        LOGFILENAME="${LOGDIR}${LOGFILESPEC}"
                        ;;
                    *)
                        echo "log-email: bad or missing logfile specification"
                        exit 1
                        ;;
                esac
            else
                RECIPIENT=${1}
            fi
            ;;
    esac
    shift
done

STOPS=$(${LOGSTOPS} ${LOGFILESPEC})
STOPCOUNT=$(${GREP} -c '^' <<<"${STOPS}")

if [ ${STOPCOUNT} -eq 0 ] ; then
    echo "log-email: log file is corrupt (no stop position data)"
    exit 2
fi

if [ "${DEBUG}" == "yes" ] ; then echo "log-email: debug: processing ${PCOUNT} position(s)" ; fi

STARTPOSITION=$(${HEAD} -1 <<< "${STOPS}")
LAT=$(echo ${STARTPOSITION} | ${JQ} -j '.latitude');
LON=$(echo ${STARTPOSITION} | ${JQ} -j '.longitude');
START="${LAT}N ${LON}E"
END=""
ENDCLAUSE=""
REVERSEGEORESULT=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${LAT}&lon=${LON}")
BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.hamlet')
if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.village') ; fi
if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.suburb') ; fi
if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.municipality') ; fi
if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.city') ; fi
if [ "${BLOB}" != "null" ] ; then START=$(${RECODE} ..html <<<"${BLOB}") ; fi
if [ "${DEBUG}" == "yes" ] ; then echo "log-email: debug: start position identified as ${START}" ; fi

# If there is a termination position, then do the same thing for that.
#
if [ ${STOPCOUNT} -gt 1 ]; then
    STOPPOSITION=$(${TAIL} -1 <<< "${STOPS}")
    LAT=$(echo ${STOPPOSITION} | ${JQ} -j '.latitude');
    LON=$(echo ${STOPPOSITION} | ${JQ} -j '.longitude');
    END="${LAT}N ${LON}E"
    REVERSEGEORESULT=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${LAT}&lon=${LON}")
    BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.hamlet')
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.village') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.suburb') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.municipality') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.city') ; fi
    if [ "${BLOB}" != "null" ] ; then END=$(${RECODE} ..html <<<"${BLOB}") ; fi
    if [ "${DEBUG}" == "yes" ] ; then echo "log-email: debug: end position identified as ${END}" ; fi
    ENDCLAUSE=" to ${END}"
fi

CATEGORY="moored"; if [ ${STOPCOUNT} -gt 1 ] ; then CATEGORY="passage" ; fi

SUBJECT="${CATEGORY}: ${LOGDATESTRING} - ${START}${ENDCLAUSE}"
BODY="date: ${PUBDATE}"$'\n'
BODY="${BODY}tags: logentry,${CATEGORY},${START},${END}"$'\n'
if [ "${DEBUG}" == "yes" ] ; then
    echo "Subject: ${SUBJECT}"
    echo -e "${BODY}"
else
    KMLFILENAME="/tmp/${LOGFILESPEC}.kml"
    ${LOGKML} -a ${LOGFILESPEC} > "${KMLFILENAME}"
    if [ ${LOGFILENAME} ] ; then
      LOGFILEEXPORTNAME="/tmp/${LOGFILESPEC}.log"
      ${CP} "${LOGFILENAME}" "${LOGFILEEXPORTNAME}"
      ${MIMECONSTRUCT} --to "${RECIPIENT}" --subject "${SUBJECT}" --string "${BODY}" --file-attach "${KMLFILENAME}" --file-attach "${LOGFILEEXPORTNAME}"
    else
      ${MIMECONSTRUCT} --to "${RECIPIENT}" --subject "${SUBJECT}" --string "${BODY}" --file-attach "${KMLFILENAME}"
    fi
fi
