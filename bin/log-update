#!/bin/bash
#
# NAME
#   log-update - update current log file
#
# SYNOPSIS
#   log-update [-c config-file] [-d log-directory] close
#   log-update [-c config-file] [-d log-directory]
#   log-update -h
#
# DESCRIPTION
#

source log.defs

CONFIGFILE=""
for name in /etc/log.cfg /usr/local/etc/log.cfg ./log.cfg ; do
    if [ -f "${name}" ] ; then CONFIGFILE=${name} ; fi
done
LOGDIR=${LOGDIR}
FORCE=
PARAGRAPH_NAMES=
VERBOSE=

while [ "${1}" != "" ] ; do
    case ${1} in
        -c) # Command line explicitly specifies a configuration file
            shift
            CONFIGFILE="${1}"
            ;;
        -d) # Command line explicitly specifies a log directory
            shift
            LOGDIR="${1}"
            ;;
    	-f) # Force
	        FORCE="yes"
	        ;;
        -h) # Display usage message
	        ${GREP} '^#' ${0}
	        exit 0
            ;;
        -v) # Display entries written to log
            VERBOSE="yes"
            ;;
        *)  # Paragraph name
	        PARAGRAPH_NAMES="${PARAGRAPH_NAMES} ${1^^}"
            ;;
    esac
    shift
done

if [ "${CONFIGFILE}" == "" ] ; then 
    echo "log-update: the -c option requires an argument"
    exit 1
else
    if [ ! -f "${CONFIGFILE}" ] ; then
        echo "log-update: bad or missing configuration file '${CONFIGFILE}'"
        exit 3
    fi
fi

if [ "${LOGDIR}" == "" ] ; then 
    echo "log-update: the -d option requires an argument"
    exit 1
else
    if [ ! -d "${LOGDIR}" ] ; then
        echo "log-update: bad or missing log directory '${LOGDIR}'"
        exit 1
    fi
fi

LOGFILE=$(${DATE} '+%Y%m%d')
LOGPATHNAME=${LOGDIR}${LOGFILE}
LOGDATE=$(${DATE} --utc +%FT%TZ)
CONFIG=$(${CAT} ${CONFIGFILE})
DOIT=0
if [ ! -f "${LOGPATHNAME}" ] ; then PARAGRAPH_NAMES="init ${PARAGRAPH_NAMES}" ; fi

for PARAGRAPH_NAME in ${PARAGRAPH_NAMES^^} ; do
    RULES=$(${SED} -n "/\[${PARAGRAPH_NAME}\]/,/^$/p" <<< "${CONFIG}" | ${TAIL} -n '+2')

    LASTTOPLEVELVALUE="ADUMMYVALUE"
    while read -r TOKEN LABEL SIGNALKPATH; do
        SIGNALK_VALUE=
    	if [[ ( ${TOKEN} == \>* ) ]] ; then
            if [ "${DOIT}" == "1" ] ; then
                TOKEN=${TOKEN:1}
                SIGNALK_VALUE=$(normalise "${TOKEN}" "$(${WGET} -q -O - ${SIGNALKPATH} | ${JQ} -j '.value' | tr -d '\012')")
            fi
        else
            if [[ "${SIGNALKPATH}" == "http:"* ]] ; then
                SIGNALK_VALUE=$(normalise "${TOKEN}" "$(${WGET} -q -O - ${SIGNALKPATH} | ${JQ} -j '.value' | tr -d '\012')")
            else
                SIGNALK_VALUE=$(normalise "${TOKEN}" "$(${SIGNALKPATH} | tr -d '\012')")
                if [ "${VERBOSE}" ] ; then echo "Command result: ${SIGNALK_VALUE}" ; fi
            fi
            if [ "${SIGNALK_VALUE}" == "1" ] ; then
                DOIT=1
            else
                DOIT=0
            fi
        fi

        if [ "${SIGNALK_VALUE}" ] ; then
            if [[ "${SIGNALKPATH}" == "http:"* ]] ; then
                TIMESTAMP=$(${WGET} -q -O - ${SIGNALKPATH} | ${JQ} -j '.timestamp' | tr -d '\012')
            else
                TIMESTAMP=$(${DATE} -Ins) ; TIMESTAMP="${TIMESTAMP%%,*}.000Z"
            fi
		    LASTLOGVALUE=
		    # Recover last logged value of this data item
		    if [ -f ${LOGPATHNAME} ] ; then
           		LASTLOGVALUE=$(${GREP} "${TOKEN} ${LABEL}" "${LOGPATHNAME}" | ${TAIL} -1 | ${CUT} -d ' ' -f5-)
		    fi
			# If there isn't a prior value, then just save this new one...
            if [ ! "${LASTLOGVALUE}" ] || [ "${FORCE}" ] || [ "${SIGNALK_VALUE}" != "${LASTLOGVALUE}" ] ; then
            	if [ "${VERBOSE}" ] ; then
                    echo "Saving: ${LOGDATE} [${TIMESTAMP}] ${TOKEN} ${LABEL} ${SIGNALK_VALUE}"
                fi
               	echo "${LOGDATE} [${TIMESTAMP}] ${TOKEN} ${LABEL} ${SIGNALK_VALUE}" >> ${LOGPATHNAME}
            fi
        fi
    done <<< "${RULES}"
done
