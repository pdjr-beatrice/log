#!/bin/bash

# System program paths #######################################################
#
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BC=/usr/bin/bc
CAT=/bin/cat
CP=/bin/cp
CURL=/usr/bin/curl
CUT=/usr/bin/cut
DATE=/bin/date
DIRNAME=/usr/bin/dirname
GREP=/bin/grep
HEAD=/usr/bin/head
JQ=/usr/bin/jq
LS=/bin/ls
MIMECONSTRUCT=/usr/bin/mime-construct
PERL=/usr/bin/perl
PYTHON=/usr/bin/python3
RECODE=/usr/bin/recode
RM=/bin/rm
SED=/bin/sed
TAC=/usr/bin/tac
TAIL=/usr/bin/tail
TR=/usr/bin/tr
UNIQ=/usr/bin/uniq
WC=/usr/bin/wc
WGET=/usr/bin/wget
XARGS=/usr/bin/xargs

# Log system file locations ##################################################
#
BINDIR=/usr/local/bin/
LOGDIR=/var/log/beatrice/
LOGIMAGEDIR=${LOGDIR}images/
LOGATREST=${BINDIR}log-atrest
LOGEMAIL=${BINDIR}log-email
LOGGREP=${BINDIR}log-grep
LOGKML=${BINDIR}log-kml
LOGPOSITIONS=${BINDIR}log-positions
LOGREPORT=${BINDIR}log-report
LOGRUNTIME=${BINDIR}log-runtime
LOGTRIP=${BINDIR}log-trip
LOGTRIPSCRIPT=${BINDIR}/../lib/log-trip.py
LOGUPDATE=${BINDIR}log-update
LOGVESSELS=${LOGDIR}vessels.log

# log-email script defaults ###########################################
#
# Where to send log files at the end of the day.
LOG_EMAIL_DEFAULT_RECIPIENT="wordpress@pdjr.eu"
# The WordPress category for email content
LOG_EMAIL_WORDPRESS_CATEGORY="log"
# Reverse GeoLookup place selector
LOG_EMAIL_REVGEO_PLACE_SELECTORS=('.address.hamlet' '.address.village' '.address.suburb' '.address.municipality' '.address.city')

# log-update script defaults ##########################################
#
# The (Signal K) server supplying data to the log system. 
LOG_UPDATE_SERVER_ADDRESS="http://192.168.1.1:3000"
# Range threshold above which AIS targets are ignored.
LOG_UPDATE_VESSEL_PROXIMITY=1.0
# HTTPS API query returning current position of host vessel.
LOG_POSITION_QUERY="${LOG_UPDATE_SERVER_ADDRESS}/signalk/v1/api/vessels/self/navigation/position/value"

# log-positions script defaults ########################################
#
LOG_POSITIONS_POSITION_PATTERN="POSITION"
LOG_POSITIONS_ENGINE_STATE_PATTERN="Main engine STATE"

# log-kml script defaults #############################################
#
LOG_KML_OPTION_GENERATE_STOPS=yes
LOG_KML_OPTION_GENERATE_TRACK=yes
LOG_KML_OPTION_GENERATE_VESSELS=no

LOG_EMAIL_TEMPORARY_STATIC_MAP="/tmp/map.png"
LOGEMAIL_DEFAULT_REPORT_TEMPLATE=/usr/local/etc/log-report.template
LOG_RUNTIME_DEFAULT_DEVICE="Main engine STATE"
LOG_REPORT_DEFAULT_TEMPLATE="log-report.template"

NOMINATUM_QUERY="https://nominatim.openstreetmap.org/reverse?format=json&"


dateminutes() {
    local h=$(${DATE} --utc -d "${1}" '+%_H')
    local m=$(${DATE} --utc -d "${1}" '+%_M')
    local s=$(${DATE} --utc -d "${1}" '+%_S')
    echo "$(( (${h} * 60) + ${m} ))"
}

minutes2hm() {
    local h=$(( ${1} / 60 ))
    local m=$(( ${1} - (${h} * 60) ))
    echo "${h}:${m}"
}

#######################################################################
# Normalise a value destined for the log file into a canonical form.
#
# ${1} - token defining the type of log entry.
# ${2} - raw value to be stored (probably from Signal K).
#
# Returns exit value = 0 on success and the normalised representation
# of ${2} is written to stdout.
#
normalise() {
  local retval=1

  if [ "${1}" ] && [ "${2}" ] ; then
    case ${1} in
      PERCENT)
        echo $( printf %.0f $( echo "${2}*100.0" | ${BC} -l ) )
        retval=0
        ;;
      POSITION)
        # The supplied data value must be a Signal K 'navigation' object.
        local lat=$(echo "${2}" | ${JQ} -j '.position.value.latitude')
        if [ "${lat}" != "0.000000" ] ; then
          local lon=$(echo "${2}" | ${JQ} -j '.position.value.longitude')
          if [ "${lon}" != "0.000000" ] ; then
            local heading=$(echo "${2}" | ${JQ} -j '.headingTrue.value * 57.2958')
            local speedOverGround=$(echo "${2}" | ${JQ} -j '.speedOverGround.value * 3.6')

            echo $( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"heading\": %03.0f, \"speedOverGround\": %0.1f }" ${lat} ${lon} ${heading} ${speedOverGround} )
            retval=0
          fi
        fi
        ;;
      RATIO)
        echo $( printf %0.4f $( echo "a=${2};if (a>0) a+=0.00005 else if (a<0) a-=0.00005;scale=4;a/1" | ${BC} -l ) )
        retval=0
        ;;
      STATE) 
        if [ "${2}" == "0" ] ; then
          echo "0"
        else
          echo "1"
        fi
        retval=0
        ;;
      SWITCHBANKS)
        echo $( echo "${2}" | ${JQ} -j '.[] | .[] | .state.value' )
        retval=0
        ;;
      VESSEL)
        local position=`normalise POSITION "$( wget -q -O - "${LOG_POSITION_QUERY}" | tr -d '\012' )"`
        if [ $? -eq 0 ] ; then
          readarray -t vessels <<<$( echo "${2}" | ${JQ} -j '.[] | select(.name | length > 0) | "{ \"mmsi\": \"" + .mmsi + "\", \"name\": \"" + .name + "\", \"position\": " + (.navigation.position.value|tostring) + ", \"heading\": " + (.navigation.headingTrue.value|tostring) + " }\n"' )
          for vessel in "${vessels[@]}" ; do
            local vesselmmsi="$(echo "${vessel}" | ${JQ} -j '.mmsi|tostring')"
            if [ "${vesselmmsi}" != "" ] ; then
              local vesselname="$(echo "${vessel}" | ${JQ} -j '.name|tostring')"
              if [ "${vesselname}" != "" ] ; then
                local vesselposition=`normalise POSITION "$(echo "${vessel}" | ${JQ} -j '.position|tostring' )"`
                if [ $? -eq 0 ] ; then
                  local separation=$( echo -e "${position}\n${vesselposition}" | ${PYTHON} ${LOGTRIPSCRIPT} )
                  if [ $( echo "${separation} < ${LOG_UPDATE_VESSEL_PROXIMITY}" | ${BC} -l ) -eq 1 ] ; then
                    echo ${vessel}
                    retval=0
                  fi
                fi
              fi
            fi
          done
        fi
        ;;
      *)
        echo ""
        ;;
    esac
  fi
  return ${retval}
}

# Compare two log entries for equivalence, returning 0 if equal, otherwise 1.
#
# ${1} - token defining the type of log entry (e.g. ENGINE, POSITION, etc.)
# ${2} - first log value
# ${3} - second log value
# ${4} - engine state (0 or 1) - comparison may depend upon this...
#
compare() {
  if [ "${1}" ] && [ "${2}" ] && [ "${3}" ] && [ "${4}" ] ; then
    case ${1} in
      PERCENT | RATIO)
        if [ "${2}" == "${3}" ] ; then
          return 0
        else
          return 1
        fi
        ;;
      POSITION)
        local places=$(( 3 + ${4} ))
        local flat=$(printf "%.${places}f " $(echo "${2}" | ${JQ} -j '.latitude'))
        local flon=$(printf "%.${places}f " $(echo "${2}" | ${JQ} -j '.longitude'))
        local slat=$(printf "%.${places}f " $(echo "${3}" | ${JQ} -j '.latitude'))
        local slon=$(printf "%.${places}f " $(echo "${3}" | ${JQ} -j '.longitude'))
        if [ "${flat}" == "${slat}" ] && [ "${flon}" == "${slon}" ] ; then
          return 0
        else
          return 1
        fi
        ;;
    esac
  fi
  return 2
}

trim() {
  s="${1}"
  if [ "${1}" ] ; then
    size_before=${#s}
    size_after=0
    while [ ${size_before} -ne ${size_after} ] ; do
      size_before=${#s}
      s="${s#[[:space:]]}"
      s="${s%[[:space:]]}"
      size_after=${#s}
    done
  fi
  echo "${s}"
  return 0
}

join() {
  local IFS="${1}"
  shift
  echo "$*"
}

