#!/bin/bash
#
# NAME
#   log-grep - get the value field from log records which match a regex
#   specified regular expression.
#
# SYNOPSIS
#   log-grep [-f] [-l] regex [logfile...]
#   log-grep -h
#
# DESCRIPTION
#   If the script is invoked with no arguments, then it will operate as
#   if it had been called with a single logfile argument set to the
#   value YYYYMMDD that represents the current day.
#
#   Otherwise, each logfile argument is a log file specifier of the
#   form:
#
#   YYYY selects all the log files for the specified year;
#   YYYYMM selects all the log files for the specified month;
#   YYYYMMDD selects the log file for the specified day.
#
#   The selected log files are concatenated and filtered to extract
#   the value fields of records matching regex.
#
#   The script supports the following command line options:
#
#   -f  restricts output to just the first selected record.
#
#   -h  displays this documentation.
#
#   -l  restricts output to just the last selected record.
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

FILESPECS=
FILESPEC=
OPTION_REGEX=
OPTION_RESTRICTION=

while [ "$1" != "" ] ; do
  case $1 in
    -f)
      OPTION_RESTRICTION="first"
      ;;
    -h)
      ${GREP} '^#' ${0}
      exit 0
      ;;
    -l)
      OPTION_RESTRICTION="last"
      ;;
    *)
      if [ "${OPTION_REGEX}" == "" ] ; then
        OPTION_REGEX="${1}"
      else
        FILESPEC=${1}
        while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
        FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      fi
      ;;
  esac
  shift
done

if [ ! "${OPTION_REGEX}" ] ; then
  echo "usage: log-grep [-f] [-l] regex logfilespec..."
  echo "usage: log-grep -h"
  exit 1
fi

if [ ! ${FILESPECS} ] ; then FILESPECS="${LOGDIR}$(${DATE} +'%Y%m%d')" ; fi

readarray -t RECORDS < <( ${CAT} ${FILESPECS} | ${GREP} "${OPTION_REGEX}" ) 

if [ ${#RECORDS[@]} -gt 0 ] ; then
  if [ "${OPTION_RESTRICTION}" == "first" ] ; then RECORDS=( "${RECORDS[0]}" ) ; fi
  if [ "${OPTION_RESTRICTION}" == "last" ] ; then RECORDS=( "${RECORDS[-1]}" ) ; fi

  for line in "${RECORDS[@]}" ; do
    date=${line%% *}
    skip=0
    tokens=0
    for token in ${line} ; do
      if [ ${skip} -eq 1 ] ; then
        if [ ${tokens} -gt 0 ] ; then echo -n " " ; fi
        echo -n "${token}"
        let "tokens+=1"
      fi
      if [[ ${token} =~ ^[[:upper:]]{4,}+$ ]] ; then skip=1 ; fi
    done
    echo ""
  done
fi
