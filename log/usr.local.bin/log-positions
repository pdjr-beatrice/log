#!/bin/bash
#
# NAME
#   log-positions - extract position data from one or more log files.
#
# SYNOPSIS
#   log-positions [-e token] [-f] [-l] [-p token] [-s] [-x] [logfile...]
#   log-positions -h
#
# DESCRIPTION
#   Output a newline separated list of JSON encoded position records
#   from one or more log files. Each record has the format:
#
#   { "latitude": lat, "longitude": lon, "date": "date" }
#
#   where lat and lon are decimal degrees and date is a time string.
#
#   If logfile is ommitted, then the output will be drawn from the
#   current (todays) log file, otherwise logfile arguments are
#   processed in the order in which they occur and can have any of
#   the following formats:
#
#   YYYY selects all the log files for the specified year;
#   YYYYMM selects all the log files for the specified month;
#   YYYYMMDD selects the log file for the specified day.
#
#   With no options, the script outputs records for every position
#   recorded in the specified logfiles. Multiple records typically
#   represent the track of the vessel whilst navigating.
#
#   The -s option restricts output to just positions which represent
#   a stop. Stops are computed in the following way:
#
#   1. If there is only one position in the log file then it is
#      returned (on the assumption that the vessel was moored or
#      otherwise at rest).
#
#   2. Otherwise, the position following the first engine start is
#      returned, followed by all positions that immediately precede
#      an engine stop.
#
#   The -f option restricts output to the first position of those
#   selected.
#
#   The -l option restricts output to the last position of those
#   selected.
#
#   The script selects position and engine state records from log files
#   using a simple grep filter which selects using token values defined
#   in the log.defs variables LOG_POSITIONS_POSITION_PATTERN and
#   LOG_POSITIONS_ENGINE_STATE_PATTERN respectively.
#
#   The -p option can be used to introduce a token value which will
#   override LOG_POSITIONS_POSITION_PATTERN.
#
#   The -e option can be used to introduce a token value which will
#   override LOG_POSITIONS_ENGINE_STATE_PATTERN.
#
#   The -x option prevents extended position data (i.e. heading and
#   SOG being included in the output).
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

processPosition() {
  local date=${1%% *}
  local value=$( sed -e 's/.*POSITION //' <<<${1} )
  local lat=$(echo "${value}" | ${JQ} -j '.latitude')
  local lon=$(echo "${value}" | ${JQ} -j '.longitude')

  local output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"date\": \"%s\" }" ${lat} ${lon} ${date} )
  if [ "${2}" == "yes" ] ; then
    if [[ $( ${JQ} -j 'has("heading")' <<< ${value} ) == true ]] ; then
      heading=$(echo "${value}" | ${JQ} -j '.heading')
      output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"heading\": %03.0f, \"date\": \"%s\" }" ${lat} ${lon} ${heading} ${date} )
      if [[ $( ${JQ} -j 'has("speedOverGround")' <<< ${value} ) == true ]] ; then
        speedOverGround=$(echo "${value}" | ${JQ} -j '.speedOverGround')
        output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"heading\": %03.0f, \"speedOverGround\": %0.1f, \"date\": \"%s\" }" ${lat} ${lon} ${heading} ${speedOverGround} ${date} )
      fi
    fi
  fi
  echo "${output}"
}

processStop() {
  local date=${1%% *}
  local value=$( sed -e 's/.*POSITION //' <<<${1} )
  local lat=$(echo "${value}" | ${JQ} -j '.latitude')
  local lon=$(echo "${value}" | ${JQ} -j '.longitude')

  local output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"date\": \"%s\" }" ${lat} ${lon} ${date} )
  if [ "${2}" != "" ] ;  then
    local stopdate=${2%% *}
    local tsa=$( ${DATE} -d "${date/_/ }" +%s )
    local tsb=$( ${DATE} -d "${stopdate/_/ }" +%s )
    local duration=$( printf ', "duration": %0.0f' $( echo "(${tsb} - ${tsa}) / 60" | ${BC} -l ) )
    output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"date\": \"%s\"%s }" ${lat} ${lon} ${date} "${duration}" )
  fi
  echo "${output}"
}

function getStartPosition {
  local retval=0
  local line=
  local posline=
  for (( i = 0 ; i < ${#lines[@]} ; i++ )) ; do
    line="${lines[${i}]}"
    if [[ "${line}" =~ POSITION ]] ; then posline="${line}" ; retval=$((i+1)) ; break ; fi
  done
  echo "${retval}=${posline}"
  return 0
}

function getStopPosition {
  local index=0
  local line=
  local posline=
  for (( i = ${#lines[@]}-1 ; i-- ; i >= 0 )) ; do
    line="${lines[${i}]}"
    if [[ "${line}" =~ POSITION ]] ; then posline="${line}" ; retval=${i} ; break ; fi
  done
  echo "${retval}=${posline}"
  return 0
}

function getHaltPosition {
  local retval=0
  local line=
  local posline=
  local start=
  local stop=
  local ready=0
  for (( i = 0 ; i < ${#lines[@]} ; i++ )) ; do
    line="${lines[${i}]}"
    if [[ "${line}" =~ POSITION ]] ; then
      posline="${line}"
      if [ ${ready} -eq 1 ] ; then
        start="${posline}"
        retval=${i}
        break
      fi
    fi
    if [[ "${line}" =~ STATE.0 ]]; then stop="$posline" ; fi
    if [[ "${line}" =~ STATE.1 ]]; then ready=1 ; fi
  done
  echo "${retval}=${stop}=${start}"
  return 0
}

FILESPECS=
POSITION_TYPE=positions
SELECTOR=all
POSITION_PATTERN="${LOG_POSITIONS_POSITION_PATTERN}"
ENGINE_STATE_PATTERN="${LOG_POSITIONS_ENGINE_STATE_PATTERN}"
OPTION_EXTENDED=yes

while  [ "${1}" != "" ] ; do
  case ${1} in
    -e)
      shift
      ENGINE_STATE_PATTERN="${1}"
      ;;
    -f)
      SELECTOR=first
      ;;
    -h)
      ${SED} -e '/^$/,$d' ${0}
      exit 0
      ;;
    -l)
      SELECTOR=last
      ;;
    -p)
      shift
      POSITION_PATTERN="${1}"
      ;;
    -s)
      POSITION_TYPE=stops
      ;;
    -x)
      OPTION_EXTENDED=no
      ;;
    *)
      FILESPEC=${1}
      while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
      FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      ;;
  esac
  shift
done

if [ ! "${ENGINE_STATE_PATTERN}" ] ; then echo "${0}: -e option must introduce an engine stop token" ; exit 1; fi
if [ ! "${POSITION_PATTERN}" ] ; then echo "${0}: -p option must introduce a position token" ; exit 1; fi

if [ ! "${FILESPECS}" ] ; then FILESPECS="${LOGDIR}$(${DATE} +%Y%m%d)" ; fi

for FILENAME in ${FILESPECS} ; do
  POSITIONS=()
  LAST_POSITION=
  case ${POSITION_TYPE} in
    positions)
      readarray -t lines <<<$( ${GREP} -h "${POSITION_PATTERN}" ${FILENAME} )
      for line in "${lines[@]}" ; do POSITIONS+=("$( processPosition "${line}" "${OPTION_EXTENDED}" )") ; done
      if [ ${#POSITIONS[@]} -gt 1 ] ; then POSITIONS=( "${POSITIONS[@]:1}" ) ; fi
      ;;
    stops)
      startPosition=
      stopPosition=
      poscount=$( grep -c "${POSITION_PATTERN}" ${FILENAME} )
      if [ ${poscount} -eq 1 ] ; then
        readarray -t lines <<<$( ${GREP} -h "${POSITION_PATTERN}" ${FILENAME} )
        for line in "${lines[@]}" ; do
          if [[ "${line}" =~ ${POSITION_PATTERN} ]] ; then
            POSITIONS+=( "$( processStop "${line}" )" )
            break
          fi
        done
      else
        readarray -t lines <<<$( ${SED} -e '0,/^$/d' ${FILENAME} | ${GREP} -h "${POSITION_PATTERN}\|${ENGINE_STATE_PATTERN}" )

        # Get position immediately after first engine start
        retval=$( getStartPosition )
        IFS="=" read index line <<<"${retval}"
        lines=( "${lines[@]:${index}}" )
        POSITIONS+=( "$( processStop "${line}" )" )

        # Get position immediately before last engine stop
        retval=$( getStopPosition )
        IFS="=" read index line <<<"${retval}"
        lines=( "${lines[@]:0:${index}}" )
        LAST_POSITION="$( processStop "${line}" )"

        # Get intermediate halt positions
        index=1
        while [ ${index} -ne 0 ] ; do
          retval=$( getHaltPosition )
          IFS="=" read index stop start <<<"${retval}"
          if [ ${index} -ne 0 ] ; then
            if [ "${stop}" != "" ] && [ "${start}" != "" ] ; then
              POSITIONS+=( "$( processStop "${stop}" "${start}" )" )
            fi
            lines=( "${lines[@]:${index}}" )
          fi
        done
      fi
      ;;
  esac

  POSITIONS+=( "${LAST_POSITION}" )

  if [ ${#POSITIONS[@]} -gt 0 ] ; then
    if [ "${SELECTOR}" == "first" ] ; then POSITIONS=( "${POSITIONS[0]}" ) ; fi
    if [ "${SELECTOR}" == "last" ] ; then POSITIONS=( "${POSITIONS[-1]}" ) ; fi
    for position in "${POSITIONS[@]}" ; do if [ "${position}" != "" ] ; then echo "${position}" ; fi ; done
  fi
done
