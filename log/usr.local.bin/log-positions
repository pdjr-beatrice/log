#!/bin/bash
#
# NAME
#   log-positions - extract position data from one or more log files.
#
# SYNOPSIS
#   log-positions [-e token] [-f] [-l] [-p token] [-s] [logfile...]
#   log-positions -h
#
# DESCRIPTION
#   Output a newline separated list of JSON encoded position records
#   from one or more log files. Each record has the format:
#
#   { "latitude": lat, "longitude": lon, "date": "date" }
#
#   where lat and lon are decimal degrees and date is a time string.
#
#   If logfile is ommitted, then the output will be drawn from the
#   current (todays) log file, otherwise logfile arguments are
#   processed in the order in which they occur and can have any of
#   the following formats:
#
#   YYYY selects all the log files for the specified year;
#   YYYYMM selects all the log files for the specified month;
#   YYYYMMDD selects the log file for the specified day.
#
#   With no options, the script outputs records for every position
#   recorded in the specified logfiles. Multiple records typically
#   represent the track of the vessel whilst navigating.
#
#   The -s option restricts output to just positions which represent
#   a stop. Stops are computed in the following way:
#
#   1. If there is only one position in the log file then it is
#      returned (on the assumption that the vessel was moored or
#      otherwise at rest).
#
#   2. Otherwise, the position following the first engine start is
#      returned, followed by all positions that immediately precede
#      an engine stop.
#
#   The -f option restricts output to the first position of those
#   selected.
#
#   The -l option restricts output to the last position of those
#   selected.
#
#   The script selects position and engine state records from log files
#   using a simple grep filter which selects using token values defined
#   in the log.defs variables LOG_POSITIONS_POSITION_PATTERN and
#   LOG_POSITIONS_ENGINE_STATE_PATTERN respectively.
#
#   The -p option can be used to introduce a token value which will
#   override LOG_POSITIONS_POSITION_PATTERN.
#
#   The -e option can be used to introduce a token value which will
#   override LOG_POSITIONS_ENGINE_STATE_PATTERN.
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

function processPositionLine {
  date=${1%% *}
  value=$( sed -e 's/.*POSITION //' <<<${1} )
  lat=$(echo "${value}" | ${JQ} -j '.latitude')
  lon=$(echo "${value}" | ${JQ} -j '.longitude')
  if [ "${2}" != "" ] ; then
    stopdate=${2%% *}
  
  output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"date\": \"%s\" }" ${lat} ${lon} ${date} )
  if [[ $( ${JQ} -j 'has("heading")' <<< ${value} ) == true ]] ; then
    heading=$(echo "${value}" | ${JQ} -j '.heading')
    if [[ $( ${JQ} -j 'has("speedOverGround")' <<< ${value} ) == true ]] ; then
      speedOverGround=$(echo "${value}" | ${JQ} -j '.speedOverGround')
      output=$( printf "{ \"latitude\": %0.6f, \"longitude\": %0.6f, \"heading\": %03.0f, \"speedOverGround\": %0.1f, \"date\": \"%s\" }" ${lat} ${lon} ${heading} ${speedOverGround} ${date} )
    fi
  fi
  echo "${output}"
}

FILESPECS=
POSITION_TYPE=positions
SELECTOR=all
POSITION_PATTERN="${LOG_POSITIONS_POSITION_PATTERN}"
ENGINE_STATE_PATTERN="${LOG_POSITIONS_ENGINE_STATE_PATTERN}"

while  [ "${1}" != "" ] ; do
  case ${1} in
    -e)
      shift
      ENGINE_STATE_PATTERN="${1}"
      ;;
    -f)
      SELECTOR=first
      ;;
    -h)
      ${SED} -e '/^$/,$d' ${0}
      exit 0
      ;;
    -l)
      SELECTOR=last
      ;;
    -p)
      shift
      POSITION_PATTERN="${1}"
      ;;
    -s)
      POSITION_TYPE=stops
      ;;
    *)
      FILESPEC=${1}
      while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
      FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      ;;
  esac
  shift
done

if [ ! "${ENGINE_STATE_PATTERN}" ] ; then echo "${0}: -e option must introduce an engine stop token" ; exit 1; fi
if [ ! "${POSITION_PATTERN}" ] ; then echo "${0}: -p option must introduce a position token" ; exit 1; fi

if [ ! "${FILESPECS}" ] ; then FILESPECS="${LOGDIR}$(${DATE} +%Y%m%d)" ; fi

for FILENAME in ${FILESPECS} ; do
  POSITIONS=()
  case ${POSITION_TYPE} in
    positions)
      readarray -t lines <<<$( ${GREP} -h "${POSITION_PATTERN}" ${FILENAME} )
      for line in "${lines[@]}" ; do POSITIONS+=($( processPositionLine ${line} )) done
      ;;
    stops)
      readarray -t lines <<<$( ${GREP} -h "${POSITION_PATTERN}\|${ENGINE_STATE_PATTERN}" ${FILENAME} )
      for line in "${lines[@]}" ; do
        if [[ "${line}" =~ ${POSITION_PATTERN} ]] ; then
          POSITIONS+=($( processPositionLine "${line}" ))
          break
        fi
      done

      posline=
      stopbegin=
      for line in "${lines[@]}" ; do
        if [[ "${line}" =~ ${POSITION_PATTERN} ]] ; then posline="${line}" ; fi        
        if [[ "${line}" =~ STATE\ 0 ]] ; then stopbegin="${posline}" ; fi
        if [[ "${line}" =~ STATE\ 1 ]] ; then
          if [ "${stopbegin}" != "" ] ; then
            POSITIONS+=($( processPositionLine "${stopbegin}" "${posline}" ))
            stopbegin=
          fi
        fi
      done
      if [ "${stopbegin}" != "" ] ; then POSITIONS+=($( processPositionLine "${stopbegin}" ))
      ;;
  esac

  if [ ${#POSITIONS[@]} -gt 0 ] ; then
    if [ "${SELECTOR}" == "first" ] ; then POSITIONS=( "${POSITIONS[0]}" ) ; fi
    if [ "${SELECTOR}" == "last" ] ; then POSITIONS=( "${POSITIONS[-1]}" ) ; fi
    printf '%s\n' "${POSITIONS[@]}"
  fi
done
