#!/bin/bash
#
# NAME
#   log-kml - generate a KML rendering of one or more log files.
#
# SYNOPSIS
#   log-kml [-a] [logfile...]
#   log-kml -h
#
# DESCRIPTION
#   If the script is invoked with no arguments, then it will operate as
#   if it had been called with a single logfile argument set to the
#   position YYYYMMDD that represents the current day.
#
#   Otherwise, each logfile argument is a log file specifier of the
#   form:
#
#   YYYY     - selects all the log files for the specified year;
#   YYYYMM   - selects all the log files for the specified month;
#   YYYYMMDD - elects the log file for the specified day.
#
#   log-kml(1) concatenates all the selected log files and renders them
#   as a KML document suitable for overlaying on a map. The substantive
#   KML content of the output file is:
#
#   1. A Folder containing a Placemark for each of the stops returned
#      by executing log-positions(1) against the collated data
#
#   2. A Placemark entity defining a line string which depicts the
#      track of the vessel as defined by the points returned by
#      executing log-positions(1) against the collated data.
#
#   The script supports the following command line options:
#
#   -a  passed to log-positions(1) to influence the granularity of stop
#       rendering.
#
#   -h  displays this documentation.
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

OPTION_GENERATE_STOPS=0
OPTION_GENERATE_TRACK=0
OPTION_GENERATE_VESSELS=0
FILESPECS=

while [ "${1}" != "" ] ; do
  case ${1} in
    -h)
      ${GREP} '^#' ${0}
      exit 0
      ;;
    -s)
      OPTION_GENERATE_STOPS=1
      ;;
    -t)
      OPTION_GENERATE_TRACK=1
      ;;
    -v)
      OPTION_GENERATE_VESSELS=1
      ;;
    *) 
      FILESPEC=${1}
      while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
      FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      ;;
  esac
  shift
done

if [ ! "${FILESPECS}" ] ; then FILESPECS=$(${DATE} +"%Y%m%d") ; fi

generateStops() {
  local stops=()
  local marker="#startmarker"
  local markerlabel="START"

  readarray -t stops < <( ${LOGPOSITIONS} -s ${1} )
  
  echo "    <Folder id='${1}-stops'>"
  for stop in "${stops[@]}" ; do
    if [ "${stop}" == "${stops[-1]}" ] ; then
      marker="#stopmarker"
      markerlabel="STOP"
      if [ ${#stops[@]} -eq 1 ] ; then markerlabel="MOORED"; fi
    fi
    local longitude=$(echo ${stop} | ${JQ} -j '.longitude')
    local latitude=$(echo ${stop} | ${JQ} -j '.latitude')
    local date=$(echo ${stop} | ${JQ} -j '.date')
    local time=${date#*T} ; time=${time/_/ }
    local name="${longitude}, ${latitude}"
    local reversegeoresult=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${latitude}&lon=${longitude}")
    local location=$(echo ${reversegeoresult} | ${JQ} -j '.address.hamlet')
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.village') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.suburb') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.municipality') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.city') ; fi
    if [ "${location}" != "null" ] ; then name=$(${RECODE} ..html <<<"${location}") ; fi
    echo "      <Placemark>"
    echo "        <name>${markerlabel} @ ${time}</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <a href='/?tag=${name}'>${name}</a>"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>${marker}</styleUrl>"
    echo "        <Point>"
    echo "          <coordinates>"
    echo "            ${longitude},${latitude},0"
    echo "          </coordinates>"
    echo "        </Point>"
    echo "      </Placemark>"
    marker="#haltmarker"
    markerlabel="HALT"
  done
  echo "    </Folder>"
  return 0
}

generateTrack() {
  local positions=$(${LOGPOSITIONS} ${1})
  local positioncount=$(${GREP} -c '^' <<< "${positions}")
  local distance=$(${LOGTRIP} ${1})
  local hours=$(${LOGRUNTIME} ${1})
  echo "    <Folder id='${1}-track'>"
  if [ ${positioncount} -gt 1 ] ; then
    echo "      <Placemark>"
    echo "        <name>PASSAGE</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <b><a href='/?m=${day}'>${fullday}</a></b>"
    echo "            <br>${distance}km (${hours}h)"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>#linestyle</styleUrl>"
    echo "        <LineString>"
    echo "          <coordinates>" 
    while read -r position; do
      lonlat=$(echo ${position} | ${JQ} -j '.longitude,",",.latitude')
      echo "            ${lonlat},0"
    done <<< "${positions}"
    echo "          </coordinates>"
    echo "        </LineString>"
    echo "      </Placemark>"
  fi
  echo "    </Folder>"
  return 0
}

generateVessels() {
  local vessels=()
  local marker="#vesselmarker"

  readarray -t vessels <<<$( ${LOGGET} "VESSEL" ${1} )

  echo "    <Folder id='${1}-vessels'>"
  for vessel in "${vessels[@]}" ; do
    local mmsi=$(echo ${vessel} | ${JQ} -j '.mmsi')
    local name=$(echo ${vessel} | ${JQ} -j '.name')
    local heading=$(echo ${vessel} | ${JQ} -j '.heading')
    local longitude=$(echo ${vessel} | ${JQ} -j '.position.longitude')
    local latitude=$(echo ${vessel} | ${JQ} -j '.position.latitude')
    local label="${name} (${mmsi})"
    if [ "${latitude}" != "null" ] ; then
    echo "      <Placemark>"
    echo "        <name>${name} (${mmsi})</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <a href='/?tag=${name}'>${name}</a>"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>${marker}</styleUrl>"
    echo "        <Point>"
    echo "          <coordinates>"
    echo "            ${longitude},${latitude},0"
    echo "          </coordinates>"
    echo "        </Point>"
    echo "      </Placemark>"
fi
  done
  echo "    </Folder>"
  return 0
}

echo "<?xml version='1.0' encoding='UTF-8'?>"
echo "<kml xmlns='http://www.opengis.net/kml/2.2'>"
echo "<Document>"
echo "  <Style id='linestyle'>"
echo "    <LineStyle>"
echo "      <color>7fff0000</color>"
echo "      <width>4</width>"
echo "    </LineStyle>"
echo "  </Style>"
echo "  <Style id='startmarker'>"
echo "    <IconStyle>"
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='stopmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='haltmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-stroked-11.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='mooredmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/harbor-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='vesselmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/circle-stroked-11.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0.5' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"

for FILENAME in ${FILESPECS} ; do
  LOGFILE=$( ${BASENAME} ${FILENAME} )
  echo "  <Folder id='${LOGFILE}'>"

  if [ ${OPTION_GENERATE_STOPS} -eq 1 ] ; then generateStops "${LOGFILE}" ; fi
  if [ ${OPTION_GENERATE_TRACK} -eq 1 ] ; then generateTrack "${LOGFILE}" ; fi
  if [ ${OPTION_GENERATE_VESSELS} -eq 1 ] ; then generateVessels "${LOGFILE}" ; fi

  echo "  </Folder>"
done

echo "</Document>"
echo "</kml>"
exit 0

generateStops() {
  local stops=()
  local marker="#startmarker"
  local markerlabel="START"

  readarray -t stops < <( ${LOGPOSITIONS} -s ${1} )
  
  echo "    <Folder id='${LOGFILE}-track'>"
  for stop in "${stops[@]}" ; do
    if [ "${stop}" == "${stops[-1]}" ] ; then
      marker="#stopmarker"
      markerlabel="STOP"
      if [ ${#stops[@]} -eq 1 ] ; then markerlabel="MOORED"; fi
    fi
    local longitude=$(echo ${stop} | ${JQ} -j '.longitude')
    local latitude=$(echo ${stop} | ${JQ} -j '.latitude')
    local date=$(echo ${stop} | ${JQ} -j '.date')
    local time=${date#*T} ; time=${time/_/ }
    local name="${longitude}, ${latitude}"
    local reversegeoresult=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${latitude}&lon=${longitude}")
    local location=$(echo ${reversegeoresult} | ${JQ} -j '.address.hamlet')
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.village') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.suburb') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.municipality') ; fi
    if [ "${location}" == "null" ] ; then location=$(echo ${reversegeoresult} | ${JQ} -j '.address.city') ; fi
    if [ "${location}" != "null" ] ; then name=$(${RECODE} ..html <<<"${location}") ; fi
    echo "      <Placemark>"
    echo "        <name>${markerlabel} @ ${time}</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <a href='/?tag=${name}'>${name}</a>"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>${marker}</styleUrl>"
    echo "        <Point>"
    echo "          <coordinates>"
    echo "            ${longitude},${latitude},0"
    echo "          </coordinates>"
    echo "        </Point>"
    echo "      </Placemark>"
    marker="#haltmarker"
    markerlabel="HALT"
  done
  echo "    </Folder>"
  exit 0
}

generateTrack() {
  local positions=$(${LOGPOSITIONS} ${1})
  local positioncount=$(${GREP} -c '^' <<< "${positions}")
  local distance=$(${LOGTRIP} ${1})
  local hours=$(${LOGRUNTIME} ${1})
  if [ ${positioncount} -gt 1 ] ; then
    echo "    <Folder id='${LOGFILE}-track'>"
    echo "      <Placemark>"
    echo "        <name>PASSAGE</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <b><a href='/?m=${day}'>${fullday}</a></b>"
    echo "            <br>${distance}km (${hours}h)"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>#linestyle</styleUrl>"
    echo "        <LineString>"
    echo "          <coordinates>" 
    while read -r position; do
      lonlat=$(echo ${position} | ${JQ} -j '.longitude,",",.latitude')
      echo "            ${lonlat},0"
    done <<< "${positions}"
    echo "          </coordinates>"
    echo "        </LineString>"
    echo "      </Placemark>"
    echo "    </Folder>"
  fi
  exit 0
}

generateVessels() {
  local vessels=()
  local marker="#vesselmarker"

  readarray -t vessels <<<$( ${GREP} -hi "VESSEL" ${1} )

  echo "    <Folder id='${LOGFILE}-vessels'>"
  for vessel in "${vessels[@]}" ; do
    local mmsi=$(echo ${vessel} | ${JQ} -j '.mmsi')
    local name=$(echo ${vessel} | ${JQ} -j '.name')
    local heading=$(echo ${vessel} | ${JQ} -j '.heading')
    local longitude=$(echo ${stop} | ${JQ} -j '.position.longitude')
    local latitude=$(echo ${stop} | ${JQ} -j '.position.latitude')
    local label="${name} (${mmsi})"
    echo "      <Placemark>"
    echo "        <name>${name} (${mmsi})</name>"
    echo "        <description>"
    echo "          <![CDATA["
    echo "            <a href='/?tag=${name}'>${name}</a>"
    echo "          ]]>"
    echo "        </description>"
    echo "        <styleUrl>${marker}</styleUrl>"
    echo "        <Point>"
    echo "          <coordinates>"
    echo "            ${longitude},${latitude},0"
    echo "          </coordinates>"
    echo "        </Point>"
    echo "      </Placemark>"
  done
  echo "    </Folder>"
  exit 0
}
