#!/bin/bash
#
# NAME
#   log-kml - generate a KML rendering of one or more log files.
#
# SYNOPSIS
#   log-kml [-a] [logfile...]
#   log-kml -h
#
# DESCRIPTION
#   If the script is invoked with no arguments, then it will operate as
#   if it had been called with a single logfile argument set to the
#   value YYYYMMDD that represents the current day.
#
#   Otherwise, each logfile argument is a log file specifier of the
#   form:
#
#   YYYY     - selects all the log files for the specified year;
#   YYYYMM   - selects all the log files for the specified month;
#   YYYYMMDD - selects the log file for the specified day.
#
#   log-kml(1) concatenates all the selected log files and renders them
#   as a KML document suitable for overlaying on a map. The substantive
#   KML content of the output file is:
#
#   1. A Folder containing a Placemark for each of the stops returned
#      by executing log-positions(1) against the collated data
#
#   2. A Placemark entity defining a line string which depicts the
#      track of the vessel as defined by the points returned by
#      executing log-positions(1) against the collated data.
#
#   The script supports the following command line options:
#
#   -a  passed to log-positions(1) to influence the granularity of stop
#       rendering.
#
#   -h  displays this documentation.
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

OPT_ALLSTOPS=
FILESPECS=

while [ "${1}" != "" ] ; do
  case ${1} in
    -a)
      OPT_ALLSTOPS="-a"
      ;;
    -h)
      ${GREP} '^#' ${0}
      exit 0
      ;;
    *) 
      FILESPEC=${1}
      while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
      FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      ;;
  esac
  shift
done

if [ ! "${FILESPECS}" ] ; then FILESPECS=$(${DATE} +"%Y%m%d") ; fi

echo '<?xml version="1.0" encoding="UTF-8"?>'
echo '<kml xmlns="http://www.opengis.net/kml/2.2">'
echo '<Document>'
echo '  <Style id="linestyle">'
echo '    <LineStyle>'
echo '      <color>7fff0000</color>'
echo '      <width>4</width>'
echo '    </LineStyle>'
echo '  </Style>'
echo '  <Style id="startmarker">'
echo '    <IconStyle>'        
echo '      <scale>0.5</scale>'
echo '      <Icon>'
echo '        <href>/beatrice/icons/marker-stroked-15.svg</href>'
echo '      </Icon>'
echo '      <hotSpot x="0.5" y="0" xunits="fraction" yunits="fraction"/>'
echo '    </IconStyle>'
echo '  </Style>'
echo '  <Style id="stopmarker">'
echo '    <IconStyle>'        
echo '      <scale>0.5</scale>'
echo '      <Icon>'
echo '        <href>/beatrice/icons/marker-15.svg</href>'
echo '      </Icon>'
echo '      <hotSpot x="0.5" y="0" xunits="fraction" yunits="fraction"/>'
echo '    </IconStyle>'
echo '  </Style>'
echo '  <Style id="haltmarker">'
echo '    <IconStyle>'        
echo '      <scale>0.5</scale>'
echo '      <Icon>'
echo '        <href>/beatrice/icons/marker-stroked-11.svg</href>'
echo '      </Icon>'
echo '      <hotSpot x="0.5" y="0" xunits="fraction" yunits="fraction"/>'
echo '    </IconStyle>'
echo '  </Style>'
echo '  <Style id="mooredmarker">'
echo '    <IconStyle>'        
echo '      <scale>0.5</scale>'
echo '      <Icon>'
echo '        <href>/beatrice/icons/harbor-15.svg</href>'
echo '      </Icon>'
echo '      <hotSpot x="0.5" y="0" xunits="fraction" yunits="fraction"/>'
echo '    </IconStyle>'
echo '  </Style>'

arr=(${FILESPECS})
FILECOUNT=${#arr[@]}
FCOUNT=1
for FILENAME in ${FILESPECS} ; do
  LOGFILE=$( ${BASENAME} ${FILENAME} )
  echo '  <Folder id="'${LOGFILE}'">'

  STOPS=$( ${LOGPOSITIONS} -s ${LOGFILE} )
  STOPCOUNT=$( ${GREP} -c '^' <<< "${STOPS}" )

  if [ ${STOPCOUNT} -gt 0 ] ; then
    COUNT=1
    while read -r value ; do
      lon=$(echo ${value} | ${JQ} -j '.longitude')
      lat=$(echo ${value} | ${JQ} -j '.latitude')
      lonlat=$(echo ${value} | ${JQ} -j '.longitude,",",.latitude')
      date=$(echo ${value} | ${JQ} -j '.date')
      fullday=${date%%T*}
      day=${fullday//-/}
      time=${date#*T}
      name=${lonlat}
      REVERSEGEORESULT=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${lat}&lon=${lon}")
      BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.hamlet')
      if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.village') ; fi
      if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.suburb') ; fi
      if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.municipality') ; fi
      if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.city') ; fi
      if [ "${BLOB}" != "null" ] ; then name=$(${RECODE} ..html <<<"${BLOB}") ; fi
      namelc=${name,,}
      case ${COUNT} in
        1)
          if [ "${STOPCOUNT}" == "1" ] ; then 
            marker="#stopmarker"
          else
            marker="#startmarker"
          fi
          echo '    <Placemark>'
          echo "      <name>START @ ${time}</name>"
          echo '      <description>'
          echo "        <![CDATA["
          echo "          <a href='/?tag=${name}'>${name}</a>"
          echo "        ]]>"
          echo '      </description>'
          echo "      <styleUrl>${marker}</styleUrl>"
          echo '      <Point>'
          echo '        <coordinates>'
          echo "          ${lonlat},0"
          echo '        </coordinates>'
          echo '      </Point>'
          echo '    </Placemark>'
          ;;
        ${STOPCOUNT})
          marker="#stopmarker"
          echo '    <Placemark>'
          echo "      <name>STOP @ ${time}</name>"
          echo '      <description>'
          echo "        <![CDATA["
          echo "          <a href='/?tag=${name}'>${name}</a>"
          echo "        ]]>"
          echo '      </description>'
          echo "      <styleUrl>${marker}</styleUrl>"
          echo '      <Point>'
          echo '        <coordinates>'
          echo "          ${lonlat},0"
          echo '        </coordinates>'
          echo '      </Point>'
          echo '    </Placemark>'
          ;;
         *)
          marker="#haltmarker"
          echo '    <Placemark>'
          echo "      <name>HALT @ ${time}</name>"
          echo '      <description>'
          echo "        <![CDATA["
          echo "          <a href='/?tag=${name}'>${name}</a>"
          echo "        ]]>"
          echo '      </description>'
          echo "      <styleUrl>${marker}</styleUrl>"
          echo '      <Point>'
          echo '        <coordinates>'
          echo "          ${lonlat},0"
          echo '        </coordinates>'
          echo '      </Point>'
          echo '    </Placemark>'
          ;;
      esac
      COUNT=$((COUNT + 1))
    done <<< "${STOPS}"
  fi

  POSITIONS=$(${LOGPOSITIONS} ${LOGFILE})
  POSITIONCOUNT=$(${GREP} -c '^' <<< "${POSITIONS}")
  DISTANCE=$(${LOGTRIP} ${LOGFILE})
  HOURS=$(${LOGRUNTIME} ${LOGFILE})
  if [ ${POSITIONCOUNT} -gt 1 ] ; then
    echo '    <Placemark>'
    echo "      <name>PASSAGE</name>"
    echo '      <description>'
    echo "        <![CDATA["
    echo "          <b><a href='/?m=${day}'>${fullday}</a></b>"
    echo "          <br>${DISTANCE}km (${HOURS}h)"
    echo "        ]]>"
    echo '      </description>'
    echo '      <styleUrl>#linestyle</styleUrl>'
    echo '      <LineString>'
    echo '        <coordinates>'
    
    while read -r value; do
      lonlat=$(echo ${value} | ${JQ} -j '.longitude,",",.latitude')
      echo "          ${lonlat},0"
    done <<< "${POSITIONS}"

    echo '        </coordinates>'
    echo '      </LineString>'
    echo '    </Placemark>'
  fi 

  echo "  </Folder>"
  FCOUNT=$((FCOUNT + 1))
done

echo '</Document>'
echo '</kml>'
