#!/bin/bash
#
# NAME
#   log-kml - generate a KML rendering of one or more log files.
#
# SYNOPSIS
#   log-kml [-a] [logfile...]
#   log-kml -h
#
# DESCRIPTION
#   If the script is invoked with no arguments, then it will operate as
#   if it had been called with a single logfile argument set to the
#   value YYYYMMDD that represents the current day.
#
#   Otherwise, each logfile argument is a log file specifier of the
#   form:
#
#   YYYY     - selects all the log files for the specified year;
#   YYYYMM   - selects all the log files for the specified month;
#   YYYYMMDD - selects the log file for the specified day.
#
#   log-kml(1) concatenates all the selected log files and renders them
#   as a KML document suitable for overlaying on a map. The substantive
#   KML content of the output file is:
#
#   1. A Folder containing a Placemark for each of the stops returned
#      by executing log-positions(1) against the collated data
#
#   2. A Placemark entity defining a line string which depicts the
#      track of the vessel as defined by the points returned by
#      executing log-positions(1) against the collated data.
#
#   The script supports the following command line options:
#
#   -a  passed to log-positions(1) to influence the granularity of stop
#       rendering.
#
#   -h  displays this documentation.
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. /usr/local/bin/log.defs

OPT_ALLSTOPS=
FILESPECS=

while [ "${1}" != "" ] ; do
  case ${1} in
    -a)
      OPT_ALLSTOPS="-a"
      ;;
    -h)
      ${GREP} '^#' ${0}
      exit 0
      ;;
    *) 
      FILESPEC=${1}
      while [ ${#FILESPEC} -lt 8 ] ; do FILESPEC=${FILESPEC}'?' ; done
      FILESPECS="${FILESPECS} ${LOGDIR}${FILESPEC}"
      ;;
  esac
  shift
done

if [ ! "${FILESPECS}" ] ; then FILESPECS=$(${DATE} +"%Y%m%d") ; fi

echo "<?xml version='1.0' encoding='UTF-8'?>"
echo "<kml xmlns='http://www.opengis.net/kml/2.2'>"
echo "<Document>"
echo "  <Style id='linestyle'>"
echo "    <LineStyle>"
echo "      <color>7fff0000</color>"
echo "      <width>4</width>"
echo "    </LineStyle>"
echo "  </Style>"
echo "  <Style id='startmarker'>"
echo "    <IconStyle>"
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='stopmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='haltmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/marker-stroked-11.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"
echo "  <Style id='mooredmarker'>"
echo "    <IconStyle>"        
echo "      <scale>0.5</scale>"
echo "      <Icon>"
echo "        <href>/beatrice/icons/harbor-15.svg</href>"
echo "      </Icon>"
echo "      <hotSpot x='0.5' y='0' xunits='fraction' yunits='fraction'/>"
echo "    </IconStyle>"
echo "  </Style>"

for FILENAME in ${FILESPECS} ; do
  LOGFILE=$( ${BASENAME} ${FILENAME} )
  echo "  <Folder id='${LOGFILE}'>"

  readarray -t STOPS < <( ${LOGPOSITIONS} -s ${LOGFILE} )
  MARKER="#startmarker"
  MARKERLABEL="START"

  for STOP in "${STOPS[@]}" ; do
    if [ "${STOP}" == "${STOPS[-1]}" ] ; then
      MARKER="#stopmarker"
      MARKERLABEL="STOP"
      if [ ${#STOPS[@]} -eq 1 ] ; then MARKERLABEL="MOORED"; fi
    fi
    STOPLON=$(echo ${STOP} | ${JQ} -j '.longitude')
    STOPLAT=$(echo ${STOP} | ${JQ} -j '.latitude')
    STOPLONLAT=$(echo ${STOP} | ${JQ} -j '.longitude,",",.latitude')
    STOPDATE=$(echo ${STOP} | ${JQ} -j '.date')
    fullday=${STOPDATE%%T*}
    day=${fullday//-/}
    time=${STOPDATE#*T}
    time=${time/_/ }
    name=${STOPLONLAT}
    REVERSEGEORESULT=$(${WGET} -q -O - "${NOMINATUM_QUERY}lat=${STOPLAT}&lon=${STOPLON}")
    BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.hamlet')
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.village') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.suburb') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.municipality') ; fi
    if [ "${BLOB}" == "null" ] ; then BLOB=$(echo ${REVERSEGEORESULT} | ${JQ} -j '.address.city') ; fi
    if [ "${BLOB}" != "null" ] ; then name=$(${RECODE} ..html <<<"${BLOB}") ; fi
    namelc=${name,,}
    echo "    <Placemark>"
    echo "      <name>${MARKERLABEL} @ ${time}</name>"
    echo "      <description>"
    echo "        <![CDATA["
    echo "          <a href='/?tag=${name}'>${name}</a>"
    echo "        ]]>"
    echo "      </description>"
    echo "      <styleUrl>${MARKER}</styleUrl>"
    echo "      <Point>"
    echo "        <coordinates>"
    echo "          ${STOPLONLAT},0"
    echo "        </coordinates>"
    echo "      </Point>"
    echo "    </Placemark>"
    MARKER="#haltmarker"
    MARKERLABEL="HALT"
  done

  POSITIONS=$(${LOGPOSITIONS} ${LOGFILE})
  POSITIONCOUNT=$(${GREP} -c '^' <<< "${POSITIONS}")
  DISTANCE=$(${LOGTRIP} ${LOGFILE})
  HOURS=$(${LOGRUNTIME} ${LOGFILE})
  if [ ${POSITIONCOUNT} -gt 1 ] ; then
    echo "    <Placemark>"
    echo "      <name>PASSAGE</name>"
    echo "      <description>"
    echo "        <![CDATA["
    echo "          <b><a href='/?m=${day}'>${fullday}</a></b>"
    echo "          <br>${DISTANCE}km (${HOURS}h)"
    echo "        ]]>"
    echo "      </description>"
    echo "      <styleUrl>#linestyle</styleUrl>"
    echo "      <LineString>"
    echo "        <coordinates>"
    
    while read -r value; do
      lonlat=$(echo ${value} | ${JQ} -j '.longitude,",",.latitude')
      echo "          ${lonlat},0"
    done <<< "${POSITIONS}"

    echo "        </coordinates>"
    echo "      </LineString>"
    echo "    </Placemark>"
  fi 

  echo "  </Folder>"
done

echo "</Document>"
echo "</kml>"
