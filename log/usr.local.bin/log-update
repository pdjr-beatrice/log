#!/bin/bash
#
# NAME
#   log-update - update current log file
#
# SYNOPSIS
#   log-update
#   log-update [-c config-file] [-d log-directory] [-v] [-z] [paragraph...]
#
# DESCRIPTION
#   Update today's log file by processing one or more paragraphs
#   defined in a log configuration file.
#
#   The -c option introduces a configuration file name that overrides
#   the system default.
#
#   The -d option introduces a log data direcory name that overrides
#   the system default.
#
#   The -v option...
#
#   The -z option...
#
# AUTHOR
#   Paul Reeve <preeve@pdjr.eu>

. "./log.defs"

CONFIGFILE=""
for name in /etc/log.cfg /usr/local/etc/log.cfg ./log.cfg ; do
  if [ -f "${name}" ] ; then CONFIGFILE=${name} ; fi
done
LOGDIR=${LOGDIR}
PARAGRAPH_NAMES=
UTC=

while [ "${1}" != "" ] ; do
  case ${1} in
    -c) # Command line explicitly specifies a configuration file
        shift
        CONFIGFILE="${1}"
        ;;
    -d) # Command line explicitly specifies a log directory
        shift
        LOGDIR="${1}"
        ;;
    -h) # Display usage message
        ${SED} -e '/^$/,$d' ${0}
        exit 0
        ;;
    -s) # Command line explicitly spedifies a server address
        shift
        LOG_UPDATE_SERVER_ADDRESS=${1}
        ;;
    -z) # Perform all processing in UTC
        UTC=-u
        ;;
    *)  # Paragraph name
        PARAGRAPH_NAMES="${PARAGRAPH_NAMES} ${1:u}"
        ;;
  esac
  shift
done

if [ "${CONFIGFILE}" == "" ] ; then echo "log-update: the -c option requires an argument" ; exit 1 ; fi
if [ "${LOGDIR}" == "" ] ; then echo "log-update: the -d option requires an argument" ; exit 1 ; fi
if [ "${LOG_UPDATE_SERVER_ADDRESS}" == "" ] ; then echo "log-update: the -s option requires an argument" ; exit 1 ; fi
if [ ! -f "${CONFIGFILE}" ] ; then echo "log-update: bad or missing configuration file '${CONFIGFILE}'" ; exit 3 ; fi
if [ ! -d "${LOGDIR}" ] ; then echo "log-update: bad or missing log directory '${LOGDIR}'" ; exit 1 ; fi

LOGFILE_NAME=$( ${DATE} ${UTC} '+%Y%m%d' )
LOGFILE_PATH="${LOGDIR/\/$//}/${LOGFILE_NAME}"
LOGDATE=$( ${DATE} ${UTC} +%FT%TZ )
CONFIG=$( ${CAT} ${CONFIGFILE} )
DOIT=0

# If the LOGFILE_NAME doesn't exist, then arrange for the init paragraph
# to be executed first.
#
if [ ! -f "${LOGFILE_PATH}" ] ; then PARAGRAPH_NAMES="init ${PARAGRAPH_NAMES}" ; fi

for PARAGRAPH_NAME in ${PARAGRAPH_NAMES^^} ; do
  RULES=$(sed -n "/\[${PARAGRAPH_NAME}\]/,/^$/p" <<< "${CONFIG}" | ${TAIL} -n '+2')

  LASTTOPLEVELVALUE="ADUMMYVALUE"
  while read -ra TOKENS; do
    VALUE=${TOKENS[-1]} ; unset TOKENS[-1]
    TRANSFORM=${TOKENS[-1]} ; unset TOKENS[-1]
    LABEL=$(join ' ' "${TOKENS[@]}")

    if [[ "${VALUE}" == "/"* ]] ; then
      VALUE=${LOG_UPDATE_SERVER_ADDRESS}${VALUE}
      VALUE=$( wget -q -O - ${VALUE} | tr -d '\012' )
      if [[ $( ${JQ} -j 'has("value")' <<<"${VALUE}" ) == true ]] ; then VALUE=$( ${JQ} -j '.value' <<<"${VALUE}" | tr -d '\012' ) ; fi 
    fi

    if [[ ( ${LABEL} == \!* ) ]] ; then
      LABEL=${LABEL:1}
      ITEM_IS_UNIQUE=yes
    fi

    if [[ ( ${LABEL} == \>* ) ]] ; then
      LABEL=${LABEL:1}
      if [ "${DOIT}" == "1" ] ; then
        VALUE=$(normalise "${TRANSFORM}" "${VALUE}")
      else
        VALUE=
      fi
    else
      VALUE=$(normalise "${TRANSFORM}" "${VALUE}")
      if [ "${VALUE}" == "1" ] ; then
        DOIT=1
      else
        DOIT=0
      fi
    fi

    if [ "${VALUE}" ] ; then

      readarray -t SIGNALK_ITEMS <<<${VALUE}
      for SIGNALK_ITEM in "${SIGNALK_ITEMS[@]}" ; do 
        NEWLABEL=${LABEL}

        # If LABEL normally supplies the log item ITEM_LABEL, but if
        # it begins with a '$', then it specifies a JSON field name
        # whose value should be used as the ITEM_LABEL.
        while [[ "${NEWLABEL}" =~ \$\{(.*)\} ]] ; do
          JSON_FIELD=${BASH_REMATCH[1]}
          REPLACEMENT=$( ${JQ} -j ".${JSON_FIELD}" <<<${SIGNALK_ITEM} )
          NEWLABEL=${NEWLABEL/\$\{${JSON_FIELD}\}/${REPLACEMENT}}
        done

        TIMESTAMP=
        if [[ "${SIGNALKPATH}" == "http:"* ]] ; then
          TIMESTAMP=$(${WGET} -q -O - ${SIGNALKPATH} | ${JQ} -j '.timestamp' | tr -d '\012')
        fi
        if [ ! ${TIMESTAMP} ] ; then 
          TIMESTAMP=$(${DATE} -Ins) ; TIMESTAMP="${TIMESTAMP%%,*}.000Z"
        fi

        LASTLOGVALUE=
        if [ -f ${LOGFILE_PATH} ] ; then
          LASTLOGVALUE=$(${GREP} "${NEWLABEL} ${TRANSFORM}" "${LOGFILE_PATH}" | ${TAIL} -1 | ${SED} -e "s/${TRANSFORM}/@/;s/.*@ //" )
        fi
 
        # If there isn't a prior value, then just save this new one...
        if [[ "${LASTLOGVALUE}" == "" ]] ; then
          echo "${LOGDATE} [${TIMESTAMP}] ${NEWLABEL} ${TRANSFORM} ${SIGNALK_ITEM}" >> ${LOGFILE_PATH}
        else
          if [[ "${LASTLOGVALUE}" != "${SIGNALK_ITEM}" ]] && [[ "${ITEM_IS_UNIQUE}" != "yes" ]] ; then
            echo "${LOGDATE} [${TIMESTAMP}] ${NEWLABEL} ${TRANSFORM} ${SIGNALK_ITEM}" >> ${LOGFILE_PATH}
          fi
        fi
      done
    fi
  done <<< "${RULES}"
done
